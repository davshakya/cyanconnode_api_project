{"uid":"3ce79f5ac6c003d5","name":"test_create_user_from_excel_sheet","fullName":"Test_case.test_create_user#test_create_user_from_excel_sheet","historyId":"cdba1b9541a9dac62883f53d3baf7b53","time":{"start":1703345717904,"stop":1703345717919,"duration":15},"status":"broken","statusMessage":"ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.","statusTrace":"name = 'openpyxl', extra = '', errors = 'raise', min_version = None\n\n    def import_optional_dependency(\n        name: str,\n        extra: str = \"\",\n        errors: str = \"raise\",\n        min_version: str | None = None,\n    ):\n        \"\"\"\n        Import an optional dependency.\n    \n        By default, if a dependency is missing an ImportError with a nice\n        message will be raised. If a dependency is present, but too old,\n        we raise.\n    \n        Parameters\n        ----------\n        name : str\n            The module name.\n        extra : str\n            Additional text to include in the ImportError message.\n        errors : str {'raise', 'warn', 'ignore'}\n            What to do when a dependency is not found or its version is too old.\n    \n            * raise : Raise an ImportError\n            * warn : Only applicable when a module's version is to old.\n              Warns that the version is too old and returns None\n            * ignore: If the module is not installed, return None, otherwise,\n              return the module, even if the version is too old.\n              It's expected that users validate the version locally when\n              using ``errors=\"ignore\"`` (see. ``io/html.py``)\n        min_version : str, default None\n            Specify a minimum version that is different from the global pandas\n            minimum version required.\n        Returns\n        -------\n        maybe_module : Optional[ModuleType]\n            The imported module, when found and the version is correct.\n            None is returned when the package is not found and `errors`\n            is False, or when the package's version is too old and `errors`\n            is ``'warn'``.\n        \"\"\"\n    \n        assert errors in {\"warn\", \"raise\", \"ignore\"}\n    \n        package_name = INSTALL_MAPPING.get(name)\n        install_name = package_name if package_name is not None else name\n    \n        msg = (\n            f\"Missing optional dependency '{install_name}'. {extra} \"\n            f\"Use pip or conda to install {install_name}.\"\n        )\n        try:\n>           module = importlib.import_module(name)\n\nvenv\\lib\\site-packages\\pandas\\compat\\_optional.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nname = 'openpyxl', package = None\n\n    def import_module(name, package=None):\n        \"\"\"Import a module.\n    \n        The 'package' argument is required when performing a relative import. It\n        specifies the package to use as the anchor point from which to resolve the\n        relative import to an absolute import.\n    \n        \"\"\"\n        level = 0\n        if name.startswith('.'):\n            if not package:\n                msg = (\"the 'package' argument is required to perform a relative \"\n                       \"import for {!r}\")\n                raise TypeError(msg.format(name))\n            for character in name:\n                if character != '.':\n                    break\n                level += 1\n>       return _bootstrap._gcd_import(name[level:], package, level)\nE       ModuleNotFoundError: No module named 'openpyxl'\n\nC:\\Users\\davsh\\AppData\\Local\\Programs\\Python\\Python39\\lib\\importlib\\__init__.py:127: ModuleNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nset_environment_variable = 'stag'\n\n    @allure.severity(severity_level=\"Critical\")\n    def test_create_user_from_excel_sheet(set_environment_variable):\n        endpoint = TestData().get_endpoint_env(\"stag\", 'create_user')\n>       payload = TestData().get_user_details_from_excel_file()[1]\n\nTest_case\\test_create_user.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nDataBag\\TestDataBag.py:51: in get_user_details_from_excel_file\n    excel_data = pd.read_excel(\"./DataBag/test_xlx.xlsx\")\nvenv\\lib\\site-packages\\pandas\\io\\excel\\_base.py:504: in read_excel\n    io = ExcelFile(\nvenv\\lib\\site-packages\\pandas\\io\\excel\\_base.py:1580: in __init__\n    self._reader = self._engines[engine](\nvenv\\lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:552: in __init__\n    import_optional_dependency(\"openpyxl\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nname = 'openpyxl', extra = '', errors = 'raise', min_version = None\n\n    def import_optional_dependency(\n        name: str,\n        extra: str = \"\",\n        errors: str = \"raise\",\n        min_version: str | None = None,\n    ):\n        \"\"\"\n        Import an optional dependency.\n    \n        By default, if a dependency is missing an ImportError with a nice\n        message will be raised. If a dependency is present, but too old,\n        we raise.\n    \n        Parameters\n        ----------\n        name : str\n            The module name.\n        extra : str\n            Additional text to include in the ImportError message.\n        errors : str {'raise', 'warn', 'ignore'}\n            What to do when a dependency is not found or its version is too old.\n    \n            * raise : Raise an ImportError\n            * warn : Only applicable when a module's version is to old.\n              Warns that the version is too old and returns None\n            * ignore: If the module is not installed, return None, otherwise,\n              return the module, even if the version is too old.\n              It's expected that users validate the version locally when\n              using ``errors=\"ignore\"`` (see. ``io/html.py``)\n        min_version : str, default None\n            Specify a minimum version that is different from the global pandas\n            minimum version required.\n        Returns\n        -------\n        maybe_module : Optional[ModuleType]\n            The imported module, when found and the version is correct.\n            None is returned when the package is not found and `errors`\n            is False, or when the package's version is too old and `errors`\n            is ``'warn'``.\n        \"\"\"\n    \n        assert errors in {\"warn\", \"raise\", \"ignore\"}\n    \n        package_name = INSTALL_MAPPING.get(name)\n        install_name = package_name if package_name is not None else name\n    \n        msg = (\n            f\"Missing optional dependency '{install_name}'. {extra} \"\n            f\"Use pip or conda to install {install_name}.\"\n        )\n        try:\n            module = importlib.import_module(name)\n        except ImportError:\n            if errors == \"raise\":\n>               raise ImportError(msg)\nE               ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.\n\nvenv\\lib\\site-packages\\pandas\\compat\\_optional.py:135: ImportError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"set_environment_variable","time":{"start":1703345717904,"stop":1703345717904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"set_environment_variable::0","time":{"start":1703345718013,"stop":1703345718013,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"severity","value":"Critical"},{"name":"parentSuite","value":"Test_case"},{"name":"suite","value":"test_create_user"},{"name":"host","value":"devshakya"},{"name":"thread","value":"19848-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test_case.test_create_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"eea1266c7e6dcb69","reportUrl":"http://localhost:8080/job/cyanConnode_api_project/19/allure/#testresult/eea1266c7e6dcb69","status":"broken","statusDetails":"ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.","time":{"start":1703345474389,"stop":1703345474389,"duration":0}},{"uid":"df05f94bc2eac2f2","reportUrl":"http://localhost:8080/job/cyanConnode_api_project/18/allure/#testresult/df05f94bc2eac2f2","status":"broken","statusDetails":"ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.","time":{"start":1703345138763,"stop":1703345138763,"duration":0}},{"uid":"444e545bb69ef4db","reportUrl":"http://localhost:8080/job/cyanConnode_api_project/16/allure/#testresult/444e545bb69ef4db","status":"broken","statusDetails":"ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.","time":{"start":1703345069898,"stop":1703345069898,"duration":0}},{"uid":"1bb2c6fab79720d2","reportUrl":"http://localhost:8080/job/cyanConnode_api_project/13/allure/#testresult/1bb2c6fab79720d2","status":"broken","statusDetails":"ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.","time":{"start":1703344697769,"stop":1703344697769,"duration":0}},{"uid":"a0fbe10fe3774c90","reportUrl":"http://localhost:8080/job/cyanConnode_api_project/12/allure/#testresult/a0fbe10fe3774c90","status":"broken","statusDetails":"ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.","time":{"start":1703344563503,"stop":1703344563505,"duration":2}}]},"tags":[]},"source":"3ce79f5ac6c003d5.json","parameterValues":[]}